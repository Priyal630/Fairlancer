// ----- BACKEND IMPLEMENTATION -----

// 1. User Models (models/User.js)
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Please add a name'],
    trim: true
  },
  email: {
    type: String,
    required: [true, 'Please add an email'],
    unique: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please add a valid email']
  },
  role: {
    type: String,
    enum: ['freelancer', 'employer', 'admin'],
    default: 'freelancer'
  },
  password: {
    type: String,
    required: [true, 'Please add a password'],
    minlength: 6,
    select: false
  },
  profileImage: {
    type: String,
    default: 'default.jpg'
  },
  skills: [String],
  bio: String,
  hourlyRate: Number,
  location: String,
  rating: {
    type: Number,
    default: 0
  },
  twoFactorEnabled: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

// Hash password before saving
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

// Sign JWT and return
userSchema.methods.getSignedJwtToken = function() {
  return jwt.sign({ id: this._id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRE
  });
};

// Match user entered password to hashed password in database
userSchema.methods.matchPassword = async function(enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model('User', userSchema);

// 2. Project/Job Model (models/Project.js)
const projectSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, 'Please add a title'],
    trim: true
  },
  description: {
    type: String,
    required: [true, 'Please add a description']
  },
  employer: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: true
  },
  assignedTo: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    default: null
  },
  budget: {
    type: Number,
    required: [true, 'Please add a budget']
  },
  currency: {
    type: String,
    default: 'USD'
  },
  status: {
    type: String,
    enum: ['open', 'in-progress', 'completed', 'cancelled'],
    default: 'open'
  },
  category: {
    type: String,
    required: [true, 'Please add a category']
  },
  skills: [String],
  duration: String,
  proposalCount: {
    type: Number,
    default: 0
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

const Project = mongoose.model('Project', projectSchema);

// 3. Milestone Model (models/Milestone.js)
const milestoneSchema = new mongoose.Schema({
  project: {
    type: mongoose.Schema.ObjectId,
    ref: 'Project',
    required: true
  },
  title: {
    type: String,
    required: [true, 'Please add a title']
  },
  description: {
    type: String,
    required: [true, 'Please add a description']
  },
  amount: {
    type: Number,
    required: [true, 'Please add an amount']
  },
  status: {
    type: String,
    enum: ['pending', 'in-progress', 'submitted', 'approved', 'disputed', 'released'],
    default: 'pending'
  },
  dueDate: {
    type: Date
  },
  completionDate: {
    type: Date
  },
  proofOfWork: [{
    fileUrl: String,
    description: String,
    uploadedAt: {
      type: Date,
      default: Date.now
    }
  }],
  feedbackFromEmployer: String,
  escrowId: String, // For payment processing reference
  createdAt: {
    type: Date,
    default: Date.now
  }
});

const Milestone = mongoose.model('Milestone', milestoneSchema);

// 4. Dispute Model (models/Dispute.js)
const disputeSchema = new mongoose.Schema({
  milestone: {
    type: mongoose.Schema.ObjectId,
    ref: 'Milestone',
    required: true
  },
  project: {
    type: mongoose.Schema.ObjectId,
    ref: 'Project',
    required: true
  },
  raisedBy: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: true
  },
  againstUser: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: true
  },
  reason: {
    type: String,
    required: [true, 'Please add a reason']
  },
  evidence: [{
    fileUrl: String,
    description: String,
    uploadedAt: {
      type: Date,
      default: Date.now
    }
  }],
  status: {
    type: String,
    enum: ['open', 'under-review', 'resolved-freelancer', 'resolved-employer', 'closed'],
    default: 'open'
  },
  resolution: {
    description: String,
    resolvedBy: {
      type: mongoose.Schema.ObjectId,
      ref: 'User'
    },
    resolvedAt: Date
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

const Dispute = mongoose.model('Dispute', disputeSchema);

// 5. Payment Model (models/Payment.js)
const paymentSchema = new mongoose.Schema({
  project: {
    type: mongoose.Schema.ObjectId,
    ref: 'Project',
    required: true
  },
  milestone: {
    type: mongoose.Schema.ObjectId,
    ref: 'Milestone',
    required: true
  },
  amount: {
    type: Number,
    required: [true, 'Please add an amount']
  },
  currency: {
    type: String,
    default: 'USD'
  },
  paidBy: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: true
  },
  paidTo: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: true
  },
  paymentMethod: {
    type: String,
    required: [true, 'Please add a payment method']
  },
  paymentStatus: {
    type: String,
    enum: ['pending', 'completed', 'failed', 'refunded'],
    default: 'pending'
  },
  transactionId: String,
  platformFee: Number,
  createdAt: {
    type: Date,
    default: Date.now
  }
});

const Payment = mongoose.model('Payment', paymentSchema);

// 6. Authentication Controller (controllers/authController.js)
const registerUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;
    
    // Check if user already exists
    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).json({
        success: false,
        message: 'User already exists'
      });
    }
    
    // Create user
    const user = await User.create({
      name,
      email,
      password,
      role
    });
    
    // Generate token
    const token = user.getSignedJwtToken();
    
    res.status(201).json({
      success: true,
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role
      }
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Validate email & password
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Please provide an email and password'
      });
    }
    
    // Check for user
    const user = await User.findOne({ email }).select('+password');
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Invalid credentials'
      });
    }
    
    // Check if password matches
    const isMatch = await user.matchPassword(password);
    if (!isMatch) {
      return res.status(401).json({
        success: false,
        message: 'Invalid credentials'
      });
    }
    
    // Generate token
    const token = user.getSignedJwtToken();
    
    res.status(200).json({
      success: true,
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role
      }
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// 7. Project Controller (controllers/projectController.js)
const createProject = async (req, res) => {
  try {
    // Add employer to req.body
    req.body.employer = req.user.id;
    
    const project = await Project.create(req.body);
    
    res.status(201).json({
      success: true,
      data: project
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

const getProjects = async (req, res) => {
  try {
    let query;
    
    // Copy req.query
    const reqQuery = { ...req.query };
    
    // Fields to exclude
    const removeFields = ['select', 'sort', 'page', 'limit'];
    
    // Loop over removeFields and delete them from reqQuery
    removeFields.forEach(param => delete reqQuery[param]);
    
    // Create query string
    let queryStr = JSON.stringify(reqQuery);
    
    // Create operators ($gt, $gte, etc)
    queryStr = queryStr.replace(/\b(gt|gte|lt|lte|in)\b/g, match => `$${match}`);
    
    // Finding resource
    query = Project.find(JSON.parse(queryStr)).populate({
      path: 'employer',
      select: 'name profileImage rating'
    });
    
    // Select fields
    if (req.query.select) {
      const fields = req.query.select.split(',').join(' ');
      query = query.select(fields);
    }
    
    // Sort
    if (req.query.sort) {
      const sortBy = req.query.sort.split(',').join(' ');
      query = query.sort(sortBy);
    } else {
      query = query.sort('-createdAt');
    }
    
    // Pagination
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 10;
    const startIndex = (page - 1) * limit;
    const endIndex = page * limit;
    const total = await Project.countDocuments(JSON.parse(queryStr));
    
    query = query.skip(startIndex).limit(limit);
    
    // Executing query
    const projects = await query;
    
    // Pagination result
    const pagination = {};
    
    if (endIndex < total) {
      pagination.next = {
        page: page + 1,
        limit
      };
    }
    
    if (startIndex > 0) {
      pagination.prev = {
        page: page - 1,
        limit
      };
    }
    
    res.status(200).json({
      success: true,
      count: projects.length,
      pagination,
      data: projects
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// 8. Milestone Controller (controllers/milestoneController.js)
const createMilestone = async (req, res) => {
  try {
    const { projectId } = req.params;
    
    // Check if project exists and user is employer
    const project = await Project.findById(projectId);
    
    if (!project) {
      return res.status(404).json({
        success: false,
        message: 'Project not found'
      });
    }
    
    // Make sure user is project employer
    if (project.employer.toString() !== req.user.id && req.user.role !== 'admin') {
      return res.status(401).json({
        success: false,
        message: 'Not authorized to add milestones to this project'
      });
    }
    
    req.body.project = projectId;
    
    // Create milestone with Stripe escrow integration
    const { title, description, amount, dueDate } = req.body;
    
    // Create escrow payment intent with Stripe
    const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount * 100, // Convert to cents
      currency: 'usd',
      setup_future_usage: 'off_session',
      capture_method: 'manual', // For escrow functionality
      metadata: {
        projectId,
        milestoneTitle: title
      }
    });
    
    // Create milestone with escrow reference
    const milestone = await Milestone.create({
      project: projectId,
      title,
      description,
      amount,
      dueDate,
      escrowId: paymentIntent.id
    });
    
    res.status(201).json({
      success: true,
      data: milestone,
      clientSecret: paymentIntent.client_secret
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

const submitMilestoneWork = async (req, res) => {
  try {
    const { milestoneId } = req.params;
    const { proofOfWork } = req.body;
    
    const milestone = await Milestone.findById(milestoneId);
    
    if (!milestone) {
      return res.status(404).json({
        success: false,
        message: 'Milestone not found'
      });
    }
    
    const project = await Project.findById(milestone.project);
    
    // Make sure user is the assigned freelancer
    if (project.assignedTo.toString() !== req.user.id) {
      return res.status(401).json({
        success: false,
        message: 'Not authorized to submit work for this milestone'
      });
    }
    
    // Update milestone status and add proof of work
    milestone.status = 'submitted';
    milestone.proofOfWork = proofOfWork;
    milestone.completionDate = Date.now();
    
    await milestone.save();
    
    res.status(200).json({
      success: true,
      data: milestone
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

const approveMilestone = async (req, res) => {
  try {
    const { milestoneId } = req.params;
    const { feedback } = req.body;
    
    const milestone = await Milestone.findById(milestoneId);
    
    if (!milestone) {
      return res.status(404).json({
        success: false,
        message: 'Milestone not found'
      });
    }
    
    const project = await Project.findById(milestone.project);
    
    // Make sure user is the project employer
    if (project.employer.toString() !== req.user.id && req.user.role !== 'admin') {
      return res.status(401).json({
        success: false,
        message: 'Not authorized to approve this milestone'
      });
    }
    
    // Process payment (release from escrow)
    const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
    await stripe.paymentIntents.capture(milestone.escrowId);
    
    // Update milestone
    milestone.status = 'released';
    milestone.feedbackFromEmployer = feedback;
    
    await milestone.save();
    
    // Create payment record
    await Payment.create({
      project: project._id,
      milestone: milestone._id,
      amount: milestone.amount,
      paidBy: project.employer,
      paidTo: project.assignedTo,
      paymentMethod: 'stripe',
      paymentStatus: 'completed',
      transactionId: milestone.escrowId,
      platformFee: milestone.amount * 0.05 // 5% platform fee
    });
    
    // Check if all milestones are completed
    const allMilestones = await Milestone.find({ project: project._id });
    const allCompleted = allMilestones.every(m => m.status === 'released');
    
    if (allCompleted) {
      project.status = 'completed';
      await project.save();
    }
    
    res.status(200).json({
      success: true,
      data: milestone
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// 9. Dispute Controller (controllers/disputeController.js)
const createDispute = async (req, res) => {
  try {
    const { milestoneId } = req.params;
    const { reason, evidence } = req.body;
    
    const milestone = await Milestone.findById(milestoneId);
    
    if (!milestone) {
      return res.status(404).json({
        success: false,
        message: 'Milestone not found'
      });
    }
    
    const project = await Project.findById(milestone.project);
    
    // Make sure user is either employer or freelancer
    if (project.employer.toString() !== req.user.id && project.assignedTo.toString() !== req.user.id) {
      return res.status(401).json({
        success: false,
        message: 'Not authorized to create dispute for this milestone'
      });
    }
    
    // Determine who the dispute is against
    const raisedBy = req.user.id;
    const againstUser = raisedBy === project.employer.toString() 
      ? project.assignedTo 
      : project.employer;
    
    // Update milestone status
    milestone.status = 'disputed';
    await milestone.save();
    
    // Create dispute
    const dispute = await Dispute.create({
      milestone: milestone._id,
      project: project._id,
      raisedBy,
      againstUser,
      reason,
      evidence
    });
    
    res.status(201).json({
      success: true,
      data: dispute
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// ----- FRONTEND IMPLEMENTATION -----

// 10. React Components - Auth Flow
// src/components/auth/Register.js
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../../contexts/AuthContext';

const Register = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
    role: 'freelancer'
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const { setCurrentUser } = useAuth();
  
  const { name, email, password, confirmPassword, role } = formData;
  
  const onChange = e => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  
  const onSubmit = async e => {
    e.preventDefault();
    
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      const res = await axios.post('/api/auth/register', {
        name,
        email,
        password,
        role
      });
      
      localStorage.setItem('token', res.data.token);
      setCurrentUser(res.data.user);
      navigate('/dashboard');
    } catch (err) {
      setError(err.response?.data?.message || 'Registration failed');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="register-container">
      <h1>Create Account</h1>
      <p>Join Fairlance and start your journey</p>
      
      {error && <div className="alert alert-danger">{error}</div>}
      
      <form onSubmit={onSubmit}>
        <div className="form-group">
          <label htmlFor="name">Full Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={name}
            onChange={onChange}
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={email}
            onChange={onChange}
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            value={password}
            onChange={onChange}
            required
            minLength="6"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="confirmPassword">Confirm Password</label>
          <input
            type="password"
            id="confirmPassword"
            name="confirmPassword"
            value={confirmPassword}
            onChange={onChange}
            required
            minLength="6"
          />
        </div>
        
        <div className="form-group">
          <label>I am a:</label>
          <div className="role-selector">
            <label>
              <input
                type="radio"
                name="role"
                value="freelancer"
                checked={role === 'freelancer'}
                onChange={onChange}
              />
              Freelancer
            </label>
            <label>
              <input
                type="radio"
                name="role"
                value="employer"
                checked={role === 'employer'}
                onChange={onChange}
              />
              Employer
            </label>
          </div>
        </div>
        
        <button 
          type="submit" 
          className="btn btn-primary btn-block"
          disabled={loading}
        >
          {loading ? 'Creating Account...' : 'Sign Up'}
        </button>
      </form>
      
      <div className="login-link">
        Already have an account? <Link to="/login">Sign In</Link>
      </div>
    </div>
  );
};

export default Register;

